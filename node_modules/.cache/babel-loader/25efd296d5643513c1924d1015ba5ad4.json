{"ast":null,"code":"var _jsxFileName = \"/home/pranuthideepak/Desktop/SOAL/MS/ms10-lupus/e-commerce/e-commerce/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport { createBrowserHistory } from 'history';\nvar history = createBrowserHistory();\n\nvar loadState = function loadState() {\n  try {\n    var serializedState = localStorage.getItem('state');\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nvar saveState = function saveState(state) {\n  try {\n    var serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {// Ignore write errors;\n  }\n};\n\nvar peristedState = loadState();\nvar store = createStore(rootReducer, peristedState, applyMiddleware(thunk));\nstore.subscribe(function () {\n  saveState(store.getState());\n});\nReactDOM.render(React.createElement(BrowserRouter, {\n  history: history,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/pranuthideepak/Desktop/SOAL/MS/ms10-lupus/e-commerce/e-commerce/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","BrowserRouter","createStore","applyMiddleware","thunk","Provider","rootReducer","createBrowserHistory","history","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","e","saveState","state","stringify","setItem","peristedState","store","subscribe","getState","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,SAAQC,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,oBAAT,QAAqC,SAArC;AAGA,IAAMC,OAAO,GAAGD,oBAAoB,EAApC;;AACA,IAAME,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,MAAI;AACF,QAAMC,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAxB;;AACA,QAAGF,eAAe,KAAK,IAAvB,EAA6B;AAC3B,aAAOG,SAAP;AACD;;AACD,WAAOC,IAAI,CAACC,KAAL,CAAWL,eAAX,CAAP;AACD,GAND,CAME,OAAOM,CAAP,EAAU;AACV,WAAOH,SAAP;AACD;AACF,CAVH;;AAYE,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAC3B,MAAI;AACF,QAAMR,eAAe,GAAGI,IAAI,CAACK,SAAL,CAAeD,KAAf,CAAxB;AACAP,IAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BV,eAA9B;AACD,GAHD,CAGE,OAAOM,CAAP,EAAU,CACV;AACD;AACF,CAPD;;AASA,IAAMK,aAAa,GAAGZ,SAAS,EAA/B;AAKF,IAAMa,KAAK,GAAGpB,WAAW,CAACI,WAAD,EAAce,aAAd,EAA6BlB,eAAe,CAACC,KAAD,CAA5C,CAAzB;AACAkB,KAAK,CAACC,SAAN,CAAgB,YAAM;AAClBN,EAAAA,SAAS,CAACK,KAAK,CAACE,QAAN,EAAD,CAAT;AACD,CAFH;AAIA1B,QAAQ,CAAC2B,MAAT,CAAgB,oBAAC,aAAD;AAAe,EAAA,OAAO,EAAEjB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAiC,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAGc,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAyB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAzB,CAAjC,CAAhB,EAA6GI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA7G,E,CAEA;AACA;AACA;;AACA3B,aAAa,CAAC4B,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\nimport {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport { createBrowserHistory } from 'history' \n\n\nconst history = createBrowserHistory()\nconst loadState = () => {\n    try {\n      const serializedState = localStorage.getItem('state');\n      if(serializedState === null) {\n        return undefined;\n      }\n      return JSON.parse(serializedState);\n    } catch (e) {\n      return undefined;\n    }\n  };\n  \n  const saveState = (state) => {\n    try {\n      const serializedState = JSON.stringify(state);\n      localStorage.setItem('state', serializedState);\n    } catch (e) {\n      // Ignore write errors;\n    }\n  };\n  \n  const peristedState = loadState();\n  \n\n  \n\nconst store = createStore(rootReducer, peristedState ,applyMiddleware(thunk));\nstore.subscribe(() => {\n    saveState(store.getState());\n  });\n  \nReactDOM.render(<BrowserRouter history={history}><Provider store= {store}><App/></Provider></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}